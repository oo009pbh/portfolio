"use strict";(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[688],{70917:(e,t,n)=>{var r;n.d(t,{F4:()=>a});var i=n(67294),l=(n(66898),n(8679),n(94199));function c(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,l.O)(t)}(r||(r=n.t(i,2))).useInsertionEffect?(r||(r=n.t(i,2))).useInsertionEffect:i.useLayoutEffect;var a=function(){var e=c.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},72688:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var r=n(67294),i=n(86329),l=n(11483),c=(0,i.ZP)((function(){return Promise.all([n.e(946),n.e(672)]).then(n.bind(n,67970))})),a=(0,i.ZP)((function(){return n.e(62).then(n.bind(n,48062))}));const s=function(){return r.createElement(l.BL,null,r.createElement(c,null),r.createElement(l.E9,null,r.createElement("h1",null,"FrontEnd"),r.createElement(l.Cc,null,r.createElement("div",null,r.createElement("h1",null,"기본"),r.createElement("div",{className:"skills"},r.createElement(a,{percent:80,width:150,height:150,color:"#FFDE25",description:"javascript"}),r.createElement(a,{percent:75,width:150,height:150,color:"#EF652A",description:"html"}),r.createElement(a,{percent:80,width:150,height:150,color:"#1C88C7",description:"css"}))),r.createElement("div",null,r.createElement("h1",null,"코어"),r.createElement("div",{className:"skills"},r.createElement(a,{percent:75,width:150,height:150,color:"#00FFFFFF",description:"react"}),r.createElement(a,{percent:50,width:150,height:150,color:"#007ACC",description:"typescript"}),r.createElement(a,{percent:40,width:150,height:150,color:"#FFD849",description:"nextjs"})))),r.createElement(l.Cc,null,r.createElement("div",null,r.createElement("h1",null,"스타일링, 상태관리"),r.createElement("div",{className:"skills"},r.createElement(a,{percent:75,width:150,height:150,color:"#E34F26",description:"emotion"}),r.createElement(a,{percent:70,width:150,height:150,color:"#764ABC",description:"redux"}))),r.createElement("div",null,r.createElement("h1",null,"패키지 매니저, 빌드"),r.createElement("div",{className:"skills"},r.createElement(a,{percent:70,width:150,height:150,color:"#CB3837",description:"npm"}),r.createElement(a,{percent:50,width:150,height:150,color:"#8ED6FB",description:"webpack"}))))),r.createElement(l.E9,null,r.createElement("h1",null,"BackEnd"),r.createElement(l.Cc,null,r.createElement("div",null,r.createElement("h1",null,"DB"),r.createElement("div",{className:"skills"},r.createElement(a,{percent:70,width:150,height:150,color:"#D99C9F",description:"mssql"}),r.createElement(a,{percent:80,width:150,height:150,color:"#DAA760",description:"mysql"}))),r.createElement("div",null,r.createElement("h1",null,"Server"),r.createElement("div",{className:"skills"},r.createElement(a,{percent:70,width:150,height:150,color:"#3770A1",description:"python"}),r.createElement(a,{percent:50,width:150,height:150,color:"#6DA55F",description:"nodejs"}))))))}},11483:(e,t,n)=>{n.d(t,{BL:()=>m,Cc:()=>u,Cd:()=>E,E9:()=>f,xI:()=>p});var r,i,l,c,a,s,o=n(2156),h=n(70917);function d(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var m=o.Z.section(r||(r=d(["\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  height: 100vh;\n  width: 100vw;\n"]))),f=o.Z.article(i||(i=d(["\n  padding-top: 100px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  & > h1 {\n    font-family: 'Helvetica Neue', sans-serif;\n    text-align: center;\n    font-weight: bold;\n    text-transform: Uppercase;\n    font-size: 30px;\n  }\n"]))),u=o.Z.div(l||(l=d(["\n  width: 80%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  & > div {\n    flex-basis: 45%;\n  }\n  & > div > h1 {\n    font-family: 'Helvetica Neue', sans-serif;\n    text-align: center;\n    font-weight: bold;\n    text-transform: Uppercase;\n    font-size: 20px;\n  }\n  & > div .skills {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n"]))),p=o.Z.div(c||(c=d(["\n  display: inline-block;\n  \n  & p {\n    font-family: 'Helvetica Neue', sans-serif;\n    text-align: center;\n    font-weight: bold;\n    text-transform: Uppercase;\n    font-size: 20px;\n  }\n"]))),E=o.Z.svg(s||(s=d(["\n  width: ",";\n  height: ",";\n  position: relative;\n  margin: 1em;\n  & > image {\n    position: absolute;\n    width: 60%;\n    height: 60%;\n    transform: translate(20%, 20%);\n  }\n\n  .bg {\n    fill: none;\n    stroke-width: 5px;\n    stroke: #1A2C34;\n  }\n\n  @keyframes progress-1 {\n    0% {\n      stroke-dashoffset: ",";\n    }\n    100% {\n      stroke-dashoffset: ",";\n    }\n  }\n\n  .meter {\n    fill: none;\n    stroke-width: 5px;\n    stroke-linecap: round;\n    transform: rotate(-90deg);\n    transform-origin: center;\n    stroke-dasharray: ",";\n    stroke-dashoffset: ",";\n    stroke: ",";\n    animation: "," 1s ease-out;\n  }\n"])),(function(e){return e.width+"px"}),(function(e){return e.height+"px"}),(function(e){return 2*(e.width/2-5)*Math.PI}),(function(e){return 2*(e.width/2-5)*Math.PI-e.percent*(e.width/2-5)*2*Math.PI/100}),(function(e){return 2*(e.width/2-5)*Math.PI}),(function(e){return 2*(e.width/2-5)*Math.PI-e.percent*(e.width/2-5)*2*Math.PI/100}),(function(e){return e.color}),(function(e){return t=2*(e.width/2-5)*Math.PI,n=2*(e.width/2-5)*Math.PI-e.percent*(e.width/2-5)*2*Math.PI/100,(0,h.F4)(a||(a=d(["\n  0% {\n    stroke-dashoffset: ","\n  }\n  100% {\n    stroke-dashoffset: ","\n  }\n"])),t,n);var t,n}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,