"use strict";(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[569],{18592:(e,n,t)=>{t.d(n,{iv:()=>u});var r=t(66898),i=t(94199),a=t(70444);function o(e,n){if(void 0===e.inserted[n.name])return e.insert("",n,e.sheet,!0)}function s(e,n,t){var r=[],i=(0,a.fp)(e,r,t);return r.length<2?t:i+n(r)}var l=function e(n){for(var t="",r=0;r<n.length;r++){var i=n[r];if(null!=i){var a=void 0;switch(typeof i){case"boolean":break;case"object":if(Array.isArray(i))a=e(i);else for(var o in a="",i)i[o]&&o&&(a&&(a+=" "),a+=o);break;default:a=i}a&&(t&&(t+=" "),t+=a)}}return t};var c=function(e){var n=(0,r.Z)(e);n.sheet.speedy=function(e){this.isSpeedy=e},n.compat=!0;var t=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=(0,i.O)(t,n.registered,void 0);return(0,a.My)(n,o,!1),n.key+"-"+o.name};return{css:t,cx:function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];return s(n.registered,t,l(r))},injectGlobal:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var a=(0,i.O)(t,n.registered);o(n,a)},keyframes:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var a=(0,i.O)(t,n.registered),s="animation-"+a.name;return o(n,{name:a.name,styles:"@keyframes "+s+"{"+a.styles+"}"}),s},hydrate:function(e){e.forEach((function(e){n.inserted[e]=!0}))},flush:function(){n.registered={},n.inserted={},n.sheet.flush()},sheet:n.sheet,cache:n,getRegisteredStyles:a.fp.bind(null,n.registered),merge:s.bind(null,n.registered,t)}}({key:"css"}),u=(c.flush,c.hydrate,c.cx,c.merge,c.getRegisteredStyles,c.injectGlobal,c.keyframes,c.css);c.sheet,c.cache},70917:(e,n,t)=>{var r;t.d(n,{F4:()=>s});var i=t(67294),a=(t(66898),t(8679),t(94199));function o(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return(0,a.O)(n)}(r||(r=t.t(i,2))).useInsertionEffect?(r||(r=t.t(i,2))).useInsertionEffect:i.useLayoutEffect;var s=function(){var e=o.apply(void 0,arguments),n="animation-"+e.name;return{name:n,styles:"@keyframes "+n+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},32569:(e,n,t)=>{t.r(n),t.d(n,{default:()=>y});var r,i,a,o=t(67294),s=t(86329),l=t(97898),c=t(73205),u=t(18592);function f(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function h(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,a=[],o=!0,s=!1;try{for(t=t.call(e);!(o=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);o=!0);}catch(e){s=!0,i=e}finally{try{o||null==t.return||t.return()}finally{if(s)throw i}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?d(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var m=(0,s.ZP)((function(){return Promise.all([t.e(946),t.e(478),t.e(917)]).then(t.bind(t,60981))})),v=(0,s.ZP)((function(){return Promise.all([t.e(946),t.e(603),t.e(258)]).then(t.bind(t,32221))}));const y=function(){var e=h((0,o.useState)([{name:"Messenger",url:"main",is_checked:!0},{name:"TimeLine",url:"timeline",is_checked:!1},{name:"Skills",url:"skills",is_checked:!1},{name:"Projects",url:"projects",is_checked:!1}]),2),n=e[0],t=e[1],s=h((0,o.useState)("initial"),2),d=s[0],y=s[1],g=h((0,o.useState)((0,u.iv)(r||(r=f(["animation: "," 1s ease-in-out; animation-fill-mode: both;"])),c.nn)),2),b=g[0],p=g[1],w=(0,l.s0)();(0,o.useEffect)((function(){switch(d){case"initial":break;case"chat":p((0,u.iv)(i||(i=f(["animation: "," 1s ease-in-out; animation-fill-mode: both;"])),c.W6));break;default:p((0,u.iv)(a||(a=f(["animation: "," 1s ease-in-out; animation-delay: 1.1s; animation-fill-mode: both;"])),c.Cg)),setTimeout((function(){return w("/"+d+"?fromMain=true")}),2100)}}),[d]);var k=function(e){var r=JSON.parse(JSON.stringify(n));r[e].is_checked||((r=(r||[]).map((function(n,t){return Object.assign(n,{is_checked:t===e})})))[0].is_checked?y("chat"):y(r[e].url),t(r))};return o.createElement(c.W2,null,o.createElement("article",{className:b},o.createElement(m,{onChangeMenu:k,menuItem:n,mode:d}),o.createElement(v,{onChangeMenu:k,menuItem:n,mode:d})))}},73205:(e,n,t)=>{t.d(n,{Cg:()=>d,W2:()=>u,W6:()=>h,nn:()=>f});var r,i,a,o,s=t(2156),l=t(70917);function c(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var u=s.Z.main(r||(r=c(["\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n  position: relative;\n  background-color: #E4F2F2;\n  & > article {\n    height: 90%;\n    width: 90%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #F8F9FD;\n    border-radius: 30px;\n    box-shadow: rgba(99, 99, 99, 0.2) 0 2px 8px 0;\n    display: flex;\n    justify-content: center;\n    & > aside {\n      width: 20%;\n    }\n    & > section {\n      width: 80%;\n    }\n  }\n"]))),f=(0,l.F4)(i||(i=c(["\n  from {\n    width: 0;\n    height: 0;\n    top: 10%;\n    left: 10%;\n    transform: translate(-10%, -10%);\n  }\n  to {\n    width: 90%;\n    height: 90%;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n"]))),h=(0,l.F4)(a||(a=c(["\n  from {\n    width: 100%;\n    height: 100%;\n    border-radius: 0;\n  }\n  to {\n    width: 90%;\n    height: 90%;\n    border-radius: 30px;\n  }\n"]))),d=(0,l.F4)(o||(o=c(["\n  from {\n    width: 90%;\n    height: 90%;\n    border-radius: 30px;\n  }\n  to {\n    width: 100%;\n    height: 100%;\n    border-radius: 0;\n  }\n"])))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,