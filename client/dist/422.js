(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[422],{92703:(e,t,n)=>{"use strict";var r=n(50414);function a(){}function l(){}l.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,l,o){if(o!==r){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:l,resetWarningCache:a};return n.PropTypes=n,n}},45697:(e,t,n)=>{e.exports=n(92703)()},50414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},65422:(e,t,n)=>{"use strict";n.d(t,{Z:()=>W});var r=n(67294),a=n(45697),l=n.n(a),o=n(73935),i="undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};function s(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function u(e,t){return e(t={exports:{}},t.exports),t.exports}var c=u((function(e,t){t.__esModule=!0,t.default=function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=0);return t},e.exports=t.default}));s(c);var f=u((function(e,t){t.__esModule=!0,t.default=function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]="number"==typeof e[n]?e[n]:e[n].val);return t},e.exports=t.default}));s(f);var p=u((function(e,t){t.__esModule=!0,t.default=function(e,t,r,a,l,o,i){var s=r+(-l*(t-a)+-o*r)*e,u=t+s*e;return Math.abs(s)<i&&Math.abs(u-a)<i?(n[0]=a,n[1]=0,n):(n[0]=u,n[1]=s,n)};var n=[0,0];e.exports=t.default}));s(p);for(var d=u((function(e){(function(){var t,n,r;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(e.exports=function(){return(t()-r)/1e6},n=process.hrtime,r=(t=function(){var e;return 1e9*(e=n())[0]+e[1]})()):Date.now?(e.exports=function(){return Date.now()-r},r=Date.now()):(e.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(i)})),y=u((function(e){(function(){var t,n,r,a,l,o;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(e.exports=function(){return(t()-l)/1e6},n=process.hrtime,a=(t=function(){var e;return 1e9*(e=n())[0]+e[1]})(),o=1e9*process.uptime(),l=a-o):Date.now?(e.exports=function(){return Date.now()-r},r=Date.now()):(e.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(i)})),m="undefined"==typeof window?i:window,h=["moz","webkit"],v="AnimationFrame",b=m["request"+v],S=m["cancel"+v]||m["cancelRequest"+v],g=0;!b&&g<h.length;g++)b=m[h[g]+"Request"+v],S=m[h[g]+"Cancel"+v]||m[h[g]+"CancelRequest"+v];if(!b||!S){var w=0,O=0,T=[];b=function(e){if(0===T.length){var t=y(),n=Math.max(0,16.666666666666668-(t-w));w=n+t,setTimeout((function(){var e=T.slice(0);T.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(w)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(n))}return T.push({handle:++O,callback:e,cancelled:!1}),O},S=function(e){for(var t=0;t<T.length;t++)T[t].handle===e&&(T[t].cancelled=!0)}}var I=function(e){return b.call(m,e)};I.cancel=function(){S.apply(m,arguments)},I.polyfill=function(e){e||(e=m),e.requestAnimationFrame=b,e.cancelAnimationFrame=S};var P=u((function(e,t){t.__esModule=!0,t.default=function(e,t,n){for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){if(0!==n[r])return!1;var a="number"==typeof t[r]?t[r]:t[r].val;if(e[r]!==a)return!1}return!0},e.exports=t.default}));s(P);var _=u((function(e,t){t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e){return e&&e.__esModule?e:{default:e}}var i=o(c),s=o(f),u=o(p),y=o(d),m=o(I),h=o(P),v=o(r),b=o(l()),S=1e3/60,g=function(e){function t(r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e.call(this,r),this.wasAnimating=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyle=null,this.clearUnreadPropStyle=function(e){var t=!1,r=a.state,l=r.currentStyle,o=r.currentVelocity,i=r.lastIdealStyle,s=r.lastIdealVelocity;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var c=e[u];"number"==typeof c&&(t||(t=!0,l=n({},l),o=n({},o),i=n({},i),s=n({},s)),l[u]=c,o[u]=0,i[u]=c,s[u]=0)}t&&a.setState({currentStyle:l,currentVelocity:o,lastIdealStyle:i,lastIdealVelocity:s})},this.startAnimationIfNecessary=function(){a.animationID=m.default((function(e){var t=a.props.style;if(h.default(a.state.currentStyle,t,a.state.currentVelocity))return a.wasAnimating&&a.props.onRest&&a.props.onRest(),a.animationID=null,a.wasAnimating=!1,void(a.accumulatedTime=0);a.wasAnimating=!0;var n=e||y.default(),r=n-a.prevTime;if(a.prevTime=n,a.accumulatedTime=a.accumulatedTime+r,a.accumulatedTime>10*S&&(a.accumulatedTime=0),0===a.accumulatedTime)return a.animationID=null,void a.startAnimationIfNecessary();var l=(a.accumulatedTime-Math.floor(a.accumulatedTime/S)*S)/S,o=Math.floor(a.accumulatedTime/S),i={},s={},c={},f={};for(var p in t)if(Object.prototype.hasOwnProperty.call(t,p)){var d=t[p];if("number"==typeof d)c[p]=d,f[p]=0,i[p]=d,s[p]=0;else{for(var m=a.state.lastIdealStyle[p],v=a.state.lastIdealVelocity[p],b=0;b<o;b++){var g=u.default(S/1e3,m,v,d.val,d.stiffness,d.damping,d.precision);m=g[0],v=g[1]}var w=u.default(S/1e3,m,v,d.val,d.stiffness,d.damping,d.precision),O=w[0],T=w[1];c[p]=m+(O-m)*l,f[p]=v+(T-v)*l,i[p]=m,s[p]=v}}a.animationID=null,a.accumulatedTime-=o*S,a.setState({currentStyle:c,currentVelocity:f,lastIdealStyle:i,lastIdealVelocity:s}),a.unreadPropStyle=null,a.startAnimationIfNecessary()}))},this.state=this.defaultState()}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,null,[{key:"propTypes",value:{defaultStyle:b.default.objectOf(b.default.number),style:b.default.objectOf(b.default.oneOfType([b.default.number,b.default.object])).isRequired,children:b.default.func.isRequired,onRest:b.default.func},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyle,n=e.style,r=t||s.default(n),a=i.default(r);return{currentStyle:r,currentVelocity:a,lastIdealStyle:r,lastIdealVelocity:a}},t.prototype.componentDidMount=function(){this.prevTime=y.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){null!=this.unreadPropStyle&&this.clearUnreadPropStyle(this.unreadPropStyle),this.unreadPropStyle=e.style,null==this.animationID&&(this.prevTime=y.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){null!=this.animationID&&(m.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=this.props.children(this.state.currentStyle);return e&&v.default.Children.only(e)},t}(v.default.Component);t.default=g,e.exports=t.default}));s(_);var k=u((function(e,t){t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e){return e&&e.__esModule?e:{default:e}}var i=o(c),s=o(f),u=o(p),y=o(d),m=o(I),h=o(P),v=o(r),b=o(l()),S=1e3/60,g=function(e){function t(r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e.call(this,r),this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(e){for(var t=a.state,r=t.currentStyles,l=t.currentVelocities,o=t.lastIdealStyles,i=t.lastIdealVelocities,s=!1,u=0;u<e.length;u++){var c=e[u],f=!1;for(var p in c)if(Object.prototype.hasOwnProperty.call(c,p)){var d=c[p];"number"==typeof d&&(f||(f=!0,s=!0,r[u]=n({},r[u]),l[u]=n({},l[u]),o[u]=n({},o[u]),i[u]=n({},i[u])),r[u][p]=d,l[u][p]=0,o[u][p]=d,i[u][p]=0)}}s&&a.setState({currentStyles:r,currentVelocities:l,lastIdealStyles:o,lastIdealVelocities:i})},this.startAnimationIfNecessary=function(){a.animationID=m.default((function(e){var t=a.props.styles(a.state.lastIdealStyles);if(function(e,t,n){for(var r=0;r<e.length;r++)if(!h.default(e[r],t[r],n[r]))return!1;return!0}(a.state.currentStyles,t,a.state.currentVelocities))return a.animationID=null,void(a.accumulatedTime=0);var n=e||y.default(),r=n-a.prevTime;if(a.prevTime=n,a.accumulatedTime=a.accumulatedTime+r,a.accumulatedTime>10*S&&(a.accumulatedTime=0),0===a.accumulatedTime)return a.animationID=null,void a.startAnimationIfNecessary();for(var l=(a.accumulatedTime-Math.floor(a.accumulatedTime/S)*S)/S,o=Math.floor(a.accumulatedTime/S),i=[],s=[],c=[],f=[],p=0;p<t.length;p++){var d=t[p],m={},v={},b={},g={};for(var w in d)if(Object.prototype.hasOwnProperty.call(d,w)){var O=d[w];if("number"==typeof O)m[w]=O,v[w]=0,b[w]=O,g[w]=0;else{for(var T=a.state.lastIdealStyles[p][w],I=a.state.lastIdealVelocities[p][w],P=0;P<o;P++){var _=u.default(S/1e3,T,I,O.val,O.stiffness,O.damping,O.precision);T=_[0],I=_[1]}var k=u.default(S/1e3,T,I,O.val,O.stiffness,O.damping,O.precision),j=k[0],M=k[1];m[w]=T+(j-T)*l,v[w]=I+(M-I)*l,b[w]=T,g[w]=I}}c[p]=m,f[p]=v,i[p]=b,s[p]=g}a.animationID=null,a.accumulatedTime-=o*S,a.setState({currentStyles:c,currentVelocities:f,lastIdealStyles:i,lastIdealVelocities:s}),a.unreadPropStyles=null,a.startAnimationIfNecessary()}))},this.state=this.defaultState()}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,null,[{key:"propTypes",value:{defaultStyles:b.default.arrayOf(b.default.objectOf(b.default.number)),styles:b.default.func.isRequired,children:b.default.func.isRequired},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyles,n=e.styles,r=t||n().map(s.default),a=r.map((function(e){return i.default(e)}));return{currentStyles:r,currentVelocities:a,lastIdealStyles:r,lastIdealVelocities:a}},t.prototype.componentDidMount=function(){this.prevTime=y.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){null!=this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles),this.unreadPropStyles=e.styles(this.state.lastIdealStyles),null==this.animationID&&(this.prevTime=y.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){null!=this.animationID&&(m.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=this.props.children(this.state.currentStyles);return e&&v.default.Children.only(e)},t}(v.default.Component);t.default=g,e.exports=t.default}));s(k);var j=u((function(e,t){t.__esModule=!0,t.default=function(e,t,n){for(var r={},a=0;a<e.length;a++)r[e[a].key]=a;var l={};for(a=0;a<t.length;a++)l[t[a].key]=a;var o=[];for(a=0;a<t.length;a++)o[a]=t[a];for(a=0;a<e.length;a++)if(!Object.prototype.hasOwnProperty.call(l,e[a].key)){var i=n(a,e[a]);null!=i&&o.push(i)}return o.sort((function(e,n){var a=l[e.key],o=l[n.key],i=r[e.key],s=r[n.key];if(null!=a&&null!=o)return l[e.key]-l[n.key];if(null!=i&&null!=s)return r[e.key]-r[n.key];if(null!=a){for(var u=0;u<t.length;u++){var c=t[u].key;if(Object.prototype.hasOwnProperty.call(r,c)){if(a<l[c]&&s>r[c])return-1;if(a>l[c]&&s<r[c])return 1}}return 1}for(u=0;u<t.length;u++)if(c=t[u].key,Object.prototype.hasOwnProperty.call(r,c)){if(o<l[c]&&i>r[c])return 1;if(o>l[c]&&i<r[c])return-1}return-1}))},e.exports=t.default}));s(j);var M=u((function(e,t){t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e){return e&&e.__esModule?e:{default:e}}var i=o(c),s=o(f),u=o(p),y=o(j),m=o(d),h=o(I),v=o(P),b=o(r),S=o(l()),g=1e3/60;function w(e,t,n){var r=t;return null==r?e.map((function(e,t){return{key:e.key,data:e.data,style:n[t]}})):e.map((function(e,t){for(var a=0;a<r.length;a++)if(r[a].key===e.key)return{key:r[a].key,data:r[a].data,style:n[t]};return{key:e.key,data:e.data,style:n[t]}}))}function O(e,t,n,r,a,l,o,s,u){for(var c=y.default(r,a,(function(e,r){var a=t(r);return null==a||v.default(l[e],a,o[e])?(n({key:r.key,data:r.data}),null):{key:r.key,data:r.data,style:a}})),f=[],p=[],d=[],m=[],h=0;h<c.length;h++){for(var b=c[h],S=null,g=0;g<r.length;g++)if(r[g].key===b.key){S=g;break}if(null==S){var w=e(b);f[h]=w,d[h]=w;var O=i.default(b.style);p[h]=O,m[h]=O}else f[h]=l[S],d[h]=s[S],p[h]=o[S],m[h]=u[S]}return[c,f,p,d,m]}var T=function(e){function t(r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e.call(this,r),this.unmounting=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(e){for(var t=O(a.props.willEnter,a.props.willLeave,a.props.didLeave,a.state.mergedPropsStyles,e,a.state.currentStyles,a.state.currentVelocities,a.state.lastIdealStyles,a.state.lastIdealVelocities),r=t[0],l=t[1],o=t[2],i=t[3],s=t[4],u=0;u<e.length;u++){var c=e[u].style,f=!1;for(var p in c)if(Object.prototype.hasOwnProperty.call(c,p)){var d=c[p];"number"==typeof d&&(f||(f=!0,l[u]=n({},l[u]),o[u]=n({},o[u]),i[u]=n({},i[u]),s[u]=n({},s[u]),r[u]={key:r[u].key,data:r[u].data,style:n({},r[u].style)}),l[u][p]=d,o[u][p]=0,i[u][p]=d,s[u][p]=0,r[u].style[p]=d)}}a.setState({currentStyles:l,currentVelocities:o,mergedPropsStyles:r,lastIdealStyles:i,lastIdealVelocities:s})},this.startAnimationIfNecessary=function(){a.unmounting||(a.animationID=h.default((function(e){if(!a.unmounting){var t=a.props.styles,n="function"==typeof t?t(w(a.state.mergedPropsStyles,a.unreadPropStyles,a.state.lastIdealStyles)):t;if(function(e,t,n,r){if(r.length!==t.length)return!1;for(var a=0;a<r.length;a++)if(r[a].key!==t[a].key)return!1;for(a=0;a<r.length;a++)if(!v.default(e[a],t[a].style,n[a]))return!1;return!0}(a.state.currentStyles,n,a.state.currentVelocities,a.state.mergedPropsStyles))return a.animationID=null,void(a.accumulatedTime=0);var r=e||m.default(),l=r-a.prevTime;if(a.prevTime=r,a.accumulatedTime=a.accumulatedTime+l,a.accumulatedTime>10*g&&(a.accumulatedTime=0),0===a.accumulatedTime)return a.animationID=null,void a.startAnimationIfNecessary();for(var o=(a.accumulatedTime-Math.floor(a.accumulatedTime/g)*g)/g,i=Math.floor(a.accumulatedTime/g),s=O(a.props.willEnter,a.props.willLeave,a.props.didLeave,a.state.mergedPropsStyles,n,a.state.currentStyles,a.state.currentVelocities,a.state.lastIdealStyles,a.state.lastIdealVelocities),c=s[0],f=s[1],p=s[2],d=s[3],y=s[4],h=0;h<c.length;h++){var b=c[h].style,S={},T={},I={},P={};for(var _ in b)if(Object.prototype.hasOwnProperty.call(b,_)){var k=b[_];if("number"==typeof k)S[_]=k,T[_]=0,I[_]=k,P[_]=0;else{for(var j=d[h][_],M=y[h][_],V=0;V<i;V++){var D=u.default(g/1e3,j,M,k.val,k.stiffness,k.damping,k.precision);j=D[0],M=D[1]}var x=u.default(g/1e3,j,M,k.val,k.stiffness,k.damping,k.precision),E=x[0],C=x[1];S[_]=j+(E-j)*o,T[_]=M+(C-M)*o,I[_]=j,P[_]=M}}d[h]=I,y[h]=P,f[h]=S,p[h]=T}a.animationID=null,a.accumulatedTime-=i*g,a.setState({currentStyles:f,currentVelocities:p,lastIdealStyles:d,lastIdealVelocities:y,mergedPropsStyles:c}),a.unreadPropStyles=null,a.startAnimationIfNecessary()}})))},this.state=this.defaultState()}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,null,[{key:"propTypes",value:{defaultStyles:S.default.arrayOf(S.default.shape({key:S.default.string.isRequired,data:S.default.any,style:S.default.objectOf(S.default.number).isRequired})),styles:S.default.oneOfType([S.default.func,S.default.arrayOf(S.default.shape({key:S.default.string.isRequired,data:S.default.any,style:S.default.objectOf(S.default.oneOfType([S.default.number,S.default.object])).isRequired}))]).isRequired,children:S.default.func.isRequired,willEnter:S.default.func,willLeave:S.default.func,didLeave:S.default.func},enumerable:!0},{key:"defaultProps",value:{willEnter:function(e){return s.default(e.style)},willLeave:function(){return null},didLeave:function(){}},enumerable:!0}]),t.prototype.defaultState=function(){var e,t=this.props,n=t.defaultStyles,r=t.styles,a=t.willEnter,l=t.willLeave,o=t.didLeave,u="function"==typeof r?r(n):r;e=null==n?u:n.map((function(e){for(var t=0;t<u.length;t++)if(u[t].key===e.key)return u[t];return e}));var c=null==n?u.map((function(e){return s.default(e.style)})):n.map((function(e){return s.default(e.style)})),f=null==n?u.map((function(e){return i.default(e.style)})):n.map((function(e){return i.default(e.style)})),p=O(a,l,o,e,u,c,f,c,f),d=p[0];return{currentStyles:p[1],currentVelocities:p[2],lastIdealStyles:p[3],lastIdealVelocities:p[4],mergedPropsStyles:d}},t.prototype.componentDidMount=function(){this.prevTime=m.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles);var t=e.styles;this.unreadPropStyles="function"==typeof t?t(w(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.lastIdealStyles)):t,null==this.animationID&&(this.prevTime=m.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){this.unmounting=!0,null!=this.animationID&&(h.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=w(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.currentStyles),t=this.props.children(e);return t&&b.default.Children.only(t)},t}(b.default.Component);t.default=T,e.exports=t.default}));s(M);var V=u((function(e,t){t.__esModule=!0,t.default={noWobble:{stiffness:170,damping:26},gentle:{stiffness:120,damping:14},wobbly:{stiffness:180,damping:12},stiff:{stiffness:210,damping:20}},e.exports=t.default}));s(V);var D=u((function(e,t){t.__esModule=!0;var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e,t){return n({},l,t,{val:e})};var r,a=(r=V)&&r.__esModule?r:{default:r},l=n({},a.default.noWobble,{precision:.01});e.exports=t.default}));s(D);var x=u((function(e,t){t.__esModule=!0,t.default=function(){},e.exports=t.default}));s(x);var E=u((function(e,t){function n(e){return e&&e.__esModule?e.default:e}t.__esModule=!0,t.Motion=n(_),t.StaggeredMotion=n(k),t.TransitionMotion=n(M),t.spring=n(D),t.presets=n(V),t.stripStyle=n(f),t.reorderKeys=n(x)}));s(E);var C=E.Motion,N=(E.StaggeredMotion,E.TransitionMotion,E.spring),R=E.presets,A=(E.stripStyle,E.reorderKeys,function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()),L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},q=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.componentDidUpdate=function(e){if(e.animValues!==n.props.animValues){var t=n.state.animValues;n.setState({animValues:t+n.props.animValues},n.calculate())}else n.calculate()},n.state={animValues:0},n.onScrollStart=n.onScrollStart.bind(n),n.resetMin=n.resetMin.bind(n),n.resetMax=n.resetMax.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),A(t,[{key:"componentDidMount",value:function(){if(this.props.pageLock){var e=document.firstElementChild.className;document.firstElementChild.className=e+(e?" ":"")+"locked__"}o.findDOMNode(this.hScrollParent).addEventListener("wheel",this.onScrollStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.props.pageLock&&(document.firstElementChild.className=document.firstElementChild.className.replace(/ ?locked__/,"")),o.findDOMNode(this.hScrollParent).removeEventListener("wheel",this.onScrollStart)}},{key:"onScrollStart",value:function(e){var t=this;e.preventDefault();var n=e.deltaY?e.deltaY:e.deltaX,r=Math.floor(n),a=this.state.animValues,l=a+r,o=a-r;this.caniscroll()&&window.requestAnimationFrame((function(){t.props.reverseScroll?t.setState({animValues:o}):t.setState({animValues:l})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(void 0!==this.calculate.timer&&this.props.children===e.children&&this.state.animValues===t.animValues&&this.props.animValues===e.animValues||this.props.children===e.children&&!1===this.caniscroll())}},{key:"caniscroll",value:function(){var e=o.findDOMNode(this.hScrollParent),t=e.getBoundingClientRect(),n=e.firstElementChild;return n.offsetLeft<t.left||n.offsetLeft+n.offsetWidth>t.width}},{key:"calculate",value:function(){var e=this;clearTimeout(this.calculate.timer),this.calculate.timer=setTimeout((function(){var t=o.findDOMNode(e.hScrollParent),n=t.lastElementChild.scrollWidth,r=t.offsetWidth,a=e.state.animValues,l=-(n-r);if(a>=1)e.resetMin();else if(a<=l){var i=l+1;e.resetMax(i)}}))}},{key:"resetMin",value:function(){this.setState({animValues:0})}},{key:"resetMax",value:function(e){this.setState({animValues:e})}},{key:"render",value:function(){var e=this,t=this.props,n=t.config,a=t.style,l=t.children,o=a.width,i=a.height,s=n||R.noWobble,u=L({height:i||"100%",width:o||"100%",overflow:"hidden",position:"relative"},a);return r.createElement("div",{ref:function(t){e.hScrollParent=t},style:u,className:"scroll-horizontal "+(this.props.className||"")},r.createElement(C,{style:{z:N(this.state.animValues,s)}},(function(e){var t={transform:"translate3d("+e.z+"px, 0,0)",display:"inline-flex",height:"100%",position:"absolute",willChange:"transform"};return r.createElement("div",{style:t},l)})))}}]),t}(r.Component);q.propTypes={reverseScroll:l().bool,pageLock:l().bool,config:l().object,style:l().object,className:l().string,children:l().array.isRequired,animValues:l().number},q.defaultProps={reverseScroll:!1,pageLock:!1,config:null,style:{width:"100%",height:"100%"},className:null,animValues:null};const W=q}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,