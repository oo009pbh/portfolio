"use strict";(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[928],{70917:(n,e,t)=>{var r;t.d(e,{F4:()=>c});var i=t(67294),a=(t(66898),t(8679),t(94199));function o(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return(0,a.O)(e)}(r||(r=t.t(i,2))).useInsertionEffect?(r||(r=t.t(i,2))).useInsertionEffect:i.useLayoutEffect;var c=function(){var n=o.apply(void 0,arguments),e="animation-"+n.name;return{name:e,styles:"@keyframes "+e+"{"+n.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},79928:(n,e,t)=>{t.r(e),t.d(e,{default:()=>d});var r=t(67294),i=t(86329),a=t(45308);function o(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}var c=(0,i.ZP)((function(){return Promise.all([t.e(946),t.e(672)]).then(t.bind(t,67970))})),l=(0,i.ZP)((function(){return Promise.all([t.e(131),t.e(966)]).then(t.bind(t,64966))}));const d=function(){var n,e,t=(n=(0,r.useState)([{content:"세종대 소프트웨학과(구 디지털 콘텐츠학과) ",date:"2016-03-02 ~\n 2022-02-18",icon:"graduate",title:"세종대 입학",type:"",animation:""},{content:"항공전단 CERT 감시병으로 복무했습니다.",date:"2018-02-19 ~\n 2019-12-15",icon:"military",title:"해군 만기전역",type:"",animation:""},{content:"SI 업체 코드크레인(유한)에서 약 4개월 인턴을 했습니다.",date:"2021-09-01 ~\n 2021-12-22",icon:"intern",title:"ICT 인턴십",type:"",animation:""},{content:"인턴으로 근무하던 회사에서 채용제안을 받아 현재까지도 재직중입니다.",date:"2022-01-03 ~",icon:"person",title:"코드크레인 재직",type:"",animation:""}]),e=2,function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,i,a=[],o=!0,c=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);o=!0);}catch(n){c=!0,i=n}finally{try{o||null==t.return||t.return()}finally{if(c)throw i}}return a}}(n,e)||function(n,e){if(n){if("string"==typeof n)return o(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?o(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=t[0];return t[1],r.createElement(a.xf,null,r.createElement(c,null),r.createElement(a.Mb,null,(i||[]).map((function(n,e){return r.createElement(l,{title:n.title,date:n.date,icon:n.icon,index:e,animation:n.animation,content:n.content})}))))}},45308:(n,e,t)=>{t.d(e,{Mb:()=>h,rc:()=>g,xf:()=>x});var r,i,a,o,c,l,d=t(2156),f=t(70917);function s(n,e){return e||(e=n.slice(0)),Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(e)}}))}var u=(0,f.F4)(r||(r=s(["\n    100% {\n        right: 100%;\n    }\n"]))),p=(0,f.F4)(i||(i=s(["\n    100% {\n        top: 100%;\n    }\n"]))),b=(0,f.F4)(a||(a=s(["\n    100% {\n        left: 100%;\n    }\n"]))),x=d.Z.div(o||(o=s(["\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  height: max-content;\n  min-height: 100vh;\n  width: 100vw;\n"]))),h=d.Z.div(c||(c=s(["\n  background-color: #F8F9FD;\n  display: flex;\n  flex-direction: column;\n  padding-top: 100px;\n  min-height: 100vh;\n"]))),g=d.Z.div(l||(l=s(['\n  position: relative;\n  display: flex;\n  margin: 20px 0;\n  border-radius: 6px;\n  align-self: center;\n  width: 50vw;\n  &:nth-child(2n + 1) {\n    flex-direction: row-reverse;\n    & div.date {\n      border-radius: 0 6px 6px 0;\n    }\n    & div.content {\n      border-radius: 6px 0 0 6px;\n    }\n\n    & div.icon {\n      &:before {\n        content: "";\n        width: 2px;\n        height: 100%;\n        background: #f6a4ec;\n        position: absolute;\n        top: 0;\n        left: 50%;\n        right: auto;\n        z-index: 0;\n        transform: translateX(-50%);\n        animation: ',' 2s forwards 4s ease-in-out;\n      }\n      &:after {\n        content: "";\n        width: 100%;\n        height: 2px;\n        background: #f6a4ec;\n        position: absolute;\n        right: 0;\n        z-index: 0;\n        top: 50%;\n        left: auto;\n        transform: translateY(-50%);\n        animation: ',' 2s forwards 4s ease-in-out;\n      }\n    }\n  }\n\n  & div.title {\n    font-size: 1.2rem;\n    line-height: 1.4;\n    text-transform: uppercase;\n    font-weight: 600;\n    color: #9251ac;\n    letter-spacing: 1.5px;\n  }\n  & div.content {\n    padding: 20px;\n    box-shadow: 0 30px 60px -12px rgba(50, 50, 93, 0.25),\n    0 18px 36px -18px rgba(0, 0, 0, 0.3),\n      0 -12px 36px -8px rgba(0, 0, 0, 0.025);\n    background: #fff;\n    width: calc(40vw - 84px);\n    border-radius: 0 6px 6px 0;\n  }\n  & div.date {\n    color: #f6a4ec;\n    font-size: 1.5rem;\n    font-weight: 600;\n    background: #9251ac;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    white-space: pre;\n    padding: 0 20px;\n    border-radius: 6px 0 0 6px;\n    z-index: 1;\n  }\n  & div.icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #9251ac;\n    align-self: center;\n    margin: 0 20px;\n    background: #f6a4ec;\n    border-radius: 100%;\n    width: 40px;\n    box-shadow: 0 30px 60px -12px rgba(50, 50, 93, 0.25),\n    0 18px 36px -18px rgba(0, 0, 0, 0.3),\n      0 -12px 36px -8px rgba(0, 0, 0, 0.025);\n    padding: 40px;\n    height: 40px;\n    position: relative;\n\n    & > svg {\n      font-size: 32px;\n      z-index: 1;\n    }\n\n    &:before {\n      content: "";\n      width: 2px;\n      height: 100%;\n      background: #f6a4ec;\n      position: absolute;\n      top: 0;\n      z-index: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      animation: ',' 2s both 4s ease-in-out;\n    }\n    &:after {\n      content: "";\n      width: 100%;\n      height: 2px;\n      background: #f6a4ec;\n      position: absolute;\n      left: 0;\n      z-index: 0;\n      top: 50%;\n      transform: translateY(-50%);\n      animation: '," 2s forwards 4s ease-in-out;\n    }\n  }\n  \n  & div.description {\n    flex-basis: 60%;\n  }\n\n  &.type2 {\n    &:after {\n      background: #555ac0;\n    }\n    & div.date {\n      color: #87bbfe;\n      background: #555ac0;\n    }\n\n    &:nth-child(2n + 1) {\n      &  div.icon {\n        &:before,\n        &:after {\n          background: #87bbfe;\n        }\n      }\n    }\n\n    &  div.icon {\n      background: #87bbfe;\n      color: #555ac0;\n      &:before,\n      &:after {\n        background: #87bbfe;\n      }\n    }\n    &  div.title {\n      color: #555ac0;\n    }\n    &  div.title {\n    }\n  }\n\n  &.type3 {\n    &:after {\n      background: #24b47e;\n    }\n    &  div.date {\n      color: #aff1b6;\n      background-color: #24b47e;\n    }\n\n    &:nth-child(2n + 1) {\n      &  div.icon {\n        &:before,\n        &:after {\n          background: #aff1b6;\n        }\n      }\n    }\n\n    & div.icon {\n      background: #aff1b6;\n      color: #24b47e;\n      &:before,\n      &:after {\n        background: #aff1b6;\n      }\n    }\n    &  div.title {\n      color: #24b47e;\n    }\n    &  div.title {\n    }\n  }\n  \n  &:last-child {\n    & div.icon {\n      &:before {\n        content: none;\n      }\n    }\n  }\n"])),p,u,p,b)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,