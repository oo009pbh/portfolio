/*! For license information please see 264.js.LICENSE.txt */
(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[264,942,349],{53124:(e,t,n)=>{"use strict";n.d(t,{E_:()=>r});var r=n(67294).createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")}});r.Consumer},53349:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var r=n(67294),o=n(73935);const i=n.p+"images/profile_image.jpg?45eabe7b190a8f9276de308bb96c5963";var a,l,c=n(2156);function u(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var s=c.Z.div(a||(a=u(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1040;\n  width: 100vw;\n  height: 100vh;\n  background-color: black;\n  opacity: 0.5;\n"]))),p=c.Z.div(l||(l=u(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1050;\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  outline: 0;\n\n  & .modal {\n    z-index: 1051;\n    background: white;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    max-width: 1000px;\n    width: 600px;\n    height: 480px;\n    border-radius: 10px;\n\n    & .modalHeader {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 20px 30px;\n      height: 120px;\n      background-color: #3C5654;\n      border-top-left-radius: 10px;\n      border-top-right-radius: 10px;\n\n      & .ant-avatar {\n        position: absolute;\n        top: 55px;\n        left: 40px;\n      }\n      \n      & > .modalDescription {\n        position: absolute;\n        left: 200px;\n        top: 64px;\n        font-size: 18px;\n        & > p {\n          margin: 0;\n        }\n        & > p.white {\n          color: white;\n        }\n      }\n    }\n\n    \n\n    & .modalContent {\n      padding: 80px 30px 30px 40px;\n      height: 360px;\n    }\n\n    & .modalHeader > .modalCloseButton {\n      width: 30px;\n      height: 30px;\n      cursor: pointer;\n      border: 0;\n    }\n  }\n"]))),f=n(23908);const d=function(e){var t=e.isShowing,n=e.hide;return t?o.createPortal(r.createElement(r.Fragment,null,r.createElement(s,null),r.createElement(p,{onClick:n,className:"animated zoomIn faster","aria-modal":!0,"aria-hidden":!0,tabIndex:-1,role:"dialog"},r.createElement("div",{onClick:function(e){return e.stopPropagation()},className:"modal"},r.createElement("div",{className:"modalHeader"},r.createElement(f.C,{src:i,size:130}),r.createElement("div",{className:"modalDescription"},r.createElement("p",{className:"white"},"안녕하세요"),r.createElement("p",{className:"white"},"소통을 중시하고,"),r.createElement("p",null,"풀스택을 지향하고 있는"),r.createElement("p",null,"프론트엔드 개발자 박병훈입니다."))),r.createElement("div",{className:"modalContent"},r.createElement("h1",null,"ABOUT ME"),r.createElement("hr",null),r.createElement("p",null,"GitHub: https://github.com/oo009pbh"),r.createElement("p",null,"Email: oo009pbh@gmail.com"),r.createElement("p",null,"Age: 26세 (1997.11.09)"),r.createElement("p",null,"Education: 세종대학교 소프트웨어학과 (구 디지털콘텐츠)"))))),document.body):null}},94184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var a=o.apply(null,n);a&&e.push(a)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var l in n)r.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},98924:(e,t,n)=>{"use strict";function r(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}n.d(t,{Z:()=>r})},80334:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>i});var r={};function o(e,t){}const i=function(e,t){!function(e,t,n){t||r[n]||(e(!1,n),r[n]=!0)}(o,e,t)}},4942:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>r})},1413:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4942);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}},45987:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(63366);function o(e,t){if(null==e)return{};var n,o,i=(0,r.Z)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},98152:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(t,{Z:()=>o})},71002:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n.d(t,{Z:()=>r})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,